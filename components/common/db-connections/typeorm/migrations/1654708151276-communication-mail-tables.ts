import { MigrationInterface, QueryRunner } from 'typeorm';

export class communicationMailTables1654708151276
  implements MigrationInterface
{
  public async up(queryRunner: QueryRunner): Promise<void> {
    await this.createRoomTable(queryRunner);
    await this.createChatTable(queryRunner);
    await this.createMessagesTable(queryRunner);
  }

  public async down(queryRunner: QueryRunner): Promise<void> {
    await this.dropRoomTable(queryRunner);
    await this.dropChatTable(queryRunner);
    await this.dropMessagesTable(queryRunner);
  }

  private async createRoomTable(queryRunner: QueryRunner) {
    await queryRunner.query(`
    create table rooms (
        id int generated by default as identity primary key,
        uuid varchar(150) not null,
        chat_id varchar(150) not null,
        user_id varchar not null,
        status varchar not null,
        name varchar allow null,
        type varchar not null,
        created_at timestamptz not null,
        updated_at timestamptz not null
      )
    `);
    await queryRunner.query(
      `grant select, insert, update, delete on table rooms to migrator`,
    );
  }
  private async createChatTable(queryRunner: QueryRunner) {
    await queryRunner.query(`
    create table chats (
        id int generated by default as identity primary key,
        uuid varchar(150) not null,
        name varchar(150) not null,
        status varchar not null,
        type varchar not null,
        created_at timestamptz not null,
        updated_at timestamptz not null
      )
    `);
    await queryRunner.query(
      `grant select, insert, update, delete on table chats to migrator`,
    );
  }
  private async createMessagesTable(queryRunner: QueryRunner) {
    await queryRunner.query(`
    create table messages (
        id int generated by default as identity primary key,
        uuid varchar(150) not null,
        room_id varchar(150) not null,
        user_id varchar not null,
        parent_id varchar allow null,
        chat_id varchar not null,
        text varchar not null,
        reply_ti varchar allow null,
        created_at timestamptz not null,
        updated_at timestamptz not null
      )
    `);
    await queryRunner.query(
      `grant select, insert, update, delete on table messages to migrator`,
    );
  }

  private async dropRoomTable(queryRunner: QueryRunner) {
    await queryRunner.query(
      `REVOKE SELECT, INSERT, UPDATE, DELETE ON rooms FROM migrator`,
    );
    await queryRunner.query(`DROP TABLE rooms`);
  }
  private async dropChatTable(queryRunner: QueryRunner) {
    await queryRunner.query(
      `REVOKE SELECT, INSERT, UPDATE, DELETE ON chats FROM migrator`,
    );
    await queryRunner.query(`DROP TABLE chats`);
  }
  private async dropMessagesTable(queryRunner: QueryRunner) {
    await queryRunner.query(
      `REVOKE SELECT, INSERT, UPDATE, DELETE ON chats FROM migrator`,
    );
    await queryRunner.query(`DROP TABLE chats`);
  }
}
